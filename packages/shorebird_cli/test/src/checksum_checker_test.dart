import 'dart:convert';
import 'dart:io';

import 'package:path/path.dart' as p;
import 'package:scoped_deps/scoped_deps.dart';
import 'package:shorebird_cli/src/checksum_checker.dart';
import 'package:shorebird_cli/src/logger.dart';
import 'package:test/test.dart';

import 'mocks.dart';

void main() {
  group(ChecksumChecker, () {
    late ShorebirdLogger logger;
    late File testFile;

    setUp(() {
      testFile = File(p.join(Directory.systemTemp.path, 'test_file'))
        ..writeAsStringSync('hello world');
    });

    R runWithOverrides<R>(R Function() body) {
      return runScoped(
        () => body(),
        values: {
          checksumCheckerRef,
          loggerRef.overrideWith(() => logger),
        },
      );
    }

    setUp(() {
      logger = MockShorebirdLogger();
    });

    group('checkFile', () {
      group('sha256', () {
        const checksum =
            'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9';
        const checksumAlgorithm = ChecksumAlgorithm.sha256;

        group('when the hash matches', () {
          test('return true', () {
            final result = runWithOverrides(
              () => checksumChecker.checkFile(
                testFile,
                checksum: checksum,
                algorithm: checksumAlgorithm,
              ),
            );
            expect(result, isTrue);
          });
        });

        group('when the hash does not match', () {
          test('return false', () {
            final result = runWithOverrides(
              () => checksumChecker.checkFile(
                testFile,
                checksum: 'wrong',
                algorithm: checksumAlgorithm,
              ),
            );
            expect(result, isFalse);
          });
        });
      });

      group('crc32c', () {
        // Generated by:
        //  gcloud-crc32c -e /path/to/test_file
        const checksum = 'yZRlqg==';
        const checksumAlgorithm = ChecksumAlgorithm.crc32c;

        group('when the hash matches', () {
          test('returns true', () {
            final result = runWithOverrides(
              () => checksumChecker.checkFile(
                testFile,
                checksum: checksum,
                algorithm: checksumAlgorithm,
              ),
            );
            expect(result, isTrue);
          });
        });

        group('when the hash does not match', () {
          test('returns false', () {
            final result = runWithOverrides(
              () => checksumChecker.checkFile(
                testFile,
                checksum: base64Encode('wrong'.codeUnits),
                algorithm: checksumAlgorithm,
              ),
            );
            expect(result, isFalse);
          });
        });
      });
    });
  });
}
