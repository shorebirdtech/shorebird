// This file handles translating the updater library's types into C types.

// Currently manually prefixing all functions with "shorebird_" to avoid
// name collisions with other libraries.
// cbindgen:prefix-with-name could do this for us.

use std::ffi::{CStr, CString};
use std::os::raw::c_char;

use crate::updater;

/// Struct containing configuration parameters for the updater.
/// Passed to all updater functions.
/// NOTE: If this struct is changed all language bindings must be updated.
#[repr(C)]
pub struct AppParameters {
    /// Update channel name.  Set to NULL or "eng" to disable updates.
    pub channel: *const libc::c_char,
    /// Client ID, required.  Typically a UUID, used for handling
    /// percentage rollouts.
    pub client_id: *const libc::c_char,
    /// Product ID, required.  Typically generated by Shorebird and included
    /// in your app to identify which app/channel/version triple to update.
    pub product_id: *const libc::c_char,
    /// base_version, required.  Named version of the app, off of which updates
    /// are based.  Can be either a version number or a hash.
    pub base_version: *const libc::c_char,
    /// Update URL.  Set to NULL to use the default update URL.
    pub update_url: *const libc::c_char,
    /// Path to the original aot library, required.  For Flutter apps this
    /// is the path to the bundled libapp.so.  May be used for compression
    /// downloaded artifacts.
    pub original_libapp_path: *const libc::c_char,
    /// Path to the app's libflutter.so, required.  May be used for ensuring
    /// downloaded artifacts are compatible with the Flutter/Dart versions
    /// used by the app.  For Flutter apps this should be the path to the
    /// bundled libflutter.so.  For Dart apps this should be the path to the
    /// dart executable.
    pub vm_path: *const libc::c_char,
    /// Path to cache_dir where the updater will store downloaded artifacts.
    pub cache_dir: *const libc::c_char,
}

fn app_config_from_c(c_params: *const AppParameters) -> updater::AppConfig {
    let c_params_ref = unsafe { &*c_params };

    fn required(c_string: *const libc::c_char) -> String {
        unsafe { CStr::from_ptr(c_string).to_str().unwrap() }.to_string()
    }

    fn optional(c_string: *const libc::c_char) -> Option<String> {
        if c_string == std::ptr::null() {
            None
        } else {
            Some(required(c_string))
        }
    }

    updater::AppConfig {
        client_id: required(c_params_ref.client_id),
        cache_dir: required(c_params_ref.cache_dir),
        channel: optional(c_params_ref.channel),
        product_id: required(c_params_ref.product_id),
        base_url: optional(c_params_ref.update_url),
        base_version: required(c_params_ref.base_version),
        original_libapp_path: required(c_params_ref.original_libapp_path),
        vm_path: required(c_params_ref.vm_path),
    }
}

#[no_mangle]
pub extern "C" fn shorebird_init(c_params: *const AppParameters) {
    let config = app_config_from_c(c_params);
    updater::init(config);
}

/// Return the active version of the app, or NULL if there is no active version.
#[no_mangle]
pub extern "C" fn shorebird_active_version() -> *mut c_char {
    let version = updater::active_patch();
    match version {
        Some(v) => {
            let c_version = CString::new(v.version).unwrap();
            c_version.into_raw()
        }
        None => std::ptr::null_mut(),
    }
}

/// Return the path to the active version of the app, or NULL if there is no
/// active version.
#[no_mangle]
// rename to shorebird_patch_path
pub extern "C" fn shorebird_active_path() -> *mut c_char {
    let version = updater::active_patch();
    match version {
        Some(v) => {
            let c_version = CString::new(v.path).unwrap();
            c_version.into_raw()
        }
        None => std::ptr::null_mut(),
    }
}

/// Free a string returned by the updater library.
#[no_mangle]
pub extern "C" fn shorebird_free_string(c_string: *mut c_char) {
    unsafe {
        if c_string.is_null() {
            return;
        }
        drop(CString::from_raw(c_string));
    }
}

/// Check for an update.  Returns true if an update is available.
#[no_mangle]
pub extern "C" fn shorebird_check_for_update() -> bool {
    return updater::check_for_update();
}

/// Synchronously download an update if one is available.
#[no_mangle]
pub extern "C" fn shorebird_update() {
    updater::update();
}
