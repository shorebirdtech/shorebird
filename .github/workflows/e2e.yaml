name: e2e

on:
  push:
  schedule:
    # At the end of every day
    - cron: "0 0 * * *"

jobs:
  verify_cli_installation:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v3

      - name: 🐦 Verify Shorebird Installation (${{ matrix.os }})
        run: |
          if [[ $(./bin/shorebird --version) =~ "Shorebird Engine • revision" ]]; then          
            echo '✅ Shorebird CLI is installed!'
          else
            echo '❌ Shorebird CLI is not installed.'
          exit 1
          fi

  verify_shorebird_init:
    permissions:
      contents: "read"
      id-token: "write"

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v3

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2

      - id: auth
        name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: id_token
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          id_token_audience: ${{ secrets.ID_TOKEN_AUDIENCE }}
          id_token_include_email: true

      - name: Set Shorebird Credentials
        run: |
          if [[ ${{ matrix.os }} == "macos-latest" ]]; then
            LOCATION=$HOME/Library/Application\ Support/shorebird/credentials.json
            mkdir -p $(dirname $LOCATION)
            echo ${{ steps.auth.outputs.id_token }} > $LOCATION
          elif [[ ${{ matrix.os }} == "windows-latest" ]]; then
            LOCATION=$HOME/AppData/Local/shorebird/credentials.json
            mkdir -p $(dirname $LOCATION)
            echo ${{ steps.auth.outputs.id_token }} > $LOCATION
          else
            LOCATION=$HOME/.config/shorebird/credentials.json
            mkdir -p $(dirname $LOCATION)
            echo ${{ steps.auth.outputs.id_token }} > $LOCATION
          fi

      - name: 📦 Create a new Flutter project
        run: flutter create shorebird_init_test --empty

      - name: 🐦 Verify Shorebird Init (${{ matrix.os }})
        run: |
          cd shorebird_init_test
          ../bin/shorebird init
          if [[ -f "shorebird.yaml" ]]; then          
            echo '✅ Shorebird Init works!'
          else
            echo '❌ Shorebird Init does not work.'

  verify_shorebird_run:
    permissions:
      contents: "read"
      id-token: "write"

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v3

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2

      - id: auth
        name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: id_token
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          id_token_audience: ${{ secrets.ID_TOKEN_AUDIENCE }}
          id_token_include_email: true

      - name: Set Shorebird Credentials
        run: |
          if [[ ${{ matrix.os }} == "macos-latest" ]]; then
            LOCATION=$HOME/Library/Application\ Support/shorebird/credentials.json
            mkdir -p $(dirname $LOCATION)
            echo ${{ steps.auth.outputs.id_token }} > $LOCATION
          elif [[ ${{ matrix.os }} == "windows-latest" ]]; then
            LOCATION=$HOME/AppData/Local/shorebird/credentials.json
            mkdir -p $(dirname $LOCATION)
            echo ${{ steps.auth.outputs.id_token }} > $LOCATION
          else
            LOCATION=$HOME/.config/shorebird/credentials.json
            mkdir -p $(dirname $LOCATION)
            echo ${{ steps.auth.outputs.id_token }} > $LOCATION
          fi

      - name: 📦 Create a new Flutter project
        run: flutter create shorebird_init_test --empty

      - name: 🐦 Verify Shorebird Run (${{ matrix.os }})
        run: |
          cd shorebird_init_test
          if [[ $(../bin/shorebird run) =~ "Starting Shorebird update" ]]; then          
            echo '✅ Shorebird run success!'
          else
            echo '❌ Shorebird run failure.'
          exit 1
          fi
